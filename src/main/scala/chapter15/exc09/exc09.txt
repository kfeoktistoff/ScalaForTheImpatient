javap -classpath /home/kirill/.sbt/boot/scala-2.10.2/lib/scala-library.jar scala.collection.immutable.Range

Compiled from "Range.scala"
public class scala.collection.immutable.Range extends scala.collection.AbstractSeq<java.lang.Object> implements scala.collection.immutable.IndexedSeq<java.lang.Object>, scala.collection.CustomParallelizable<java.lang.Object, scala.collection.parallel.immutable.ParRange>, scala.Serializable {
  public static final long serialVersionUID;
  public scala.collection.parallel.Combiner<java.lang.Object, scala.collection.parallel.immutable.ParRange> parCombiner();
  public scala.collection.generic.GenericCompanion<scala.collection.immutable.IndexedSeq> companion();
  public scala.collection.immutable.IndexedSeq<java.lang.Object> toIndexedSeq();
  public scala.collection.immutable.IndexedSeq<java.lang.Object> seq();
  public int hashCode();
  public scala.collection.IndexedSeq<java.lang.Object> thisCollection();
  public scala.collection.IndexedSeq<java.lang.Object> toCollection(scala.collection.immutable.IndexedSeq<java.lang.Object>);
  public scala.collection.Iterator<java.lang.Object> iterator();
  public <A1 extends java/lang/Object> scala.collection.mutable.Buffer<A1> toBuffer();
  public int start();
  public int end();
  public int step();
  public scala.collection.parallel.immutable.ParRange par();
  public final boolean isEmpty();
  public final int numRangeElements();
  public final int lastElement();
  public final int terminalElement();
  public int last();
  public <A1 extends java/lang/Object> int min(scala.math.Ordering<A1>);
  public <A1 extends java/lang/Object> int max(scala.math.Ordering<A1>);
  public scala.collection.immutable.Range copy(int, int, int);
  public scala.collection.immutable.Range by(int);
  public boolean isInclusive();
  public int size();
  public int length();
  public void scala$collection$immutable$Range$$validateMaxLength();
  public boolean validateRangeBoundaries(scala.Function1<java.lang.Object, java.lang.Object>);
  public final int apply(int);
  public final <U extends java/lang/Object> void foreach(scala.Function1<java.lang.Object, U>);
  public final scala.collection.immutable.Range take(int);
  public final scala.collection.immutable.Range drop(int);
  public final scala.collection.immutable.Range init();
  public final scala.collection.immutable.Range tail();
  public final scala.collection.immutable.Range takeWhile(scala.Function1<java.lang.Object, java.lang.Object>);
  public final scala.collection.immutable.Range dropWhile(scala.Function1<java.lang.Object, java.lang.Object>);
  public final scala.Tuple2<scala.collection.immutable.Range, scala.collection.immutable.Range> span(scala.Function1<java.lang.Object, java.lang.Object>);
  public final scala.Tuple2<scala.collection.immutable.Range, scala.collection.immutable.Range> splitAt(int);
  public final scala.collection.immutable.Range takeRight(int);
  public final scala.collection.immutable.Range dropRight(int);
  public final scala.collection.immutable.Range reverse();
  public scala.collection.immutable.Range inclusive();
  public final boolean contains(int);
  public final <B extends java/lang/Object> int sum(scala.math.Numeric<B>);
  public scala.collection.immutable.Range toIterable();
  public scala.collection.immutable.Range toSeq();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public final void foreach$mVc$sp(scala.Function1<java.lang.Object, scala.runtime.BoxedUnit>);
  public int apply$mcII$sp(int);
  public scala.collection.GenTraversable toTraversable();
  public scala.collection.GenMap groupBy(scala.Function1);
  public boolean isDefinedAt(java.lang.Object);
  public scala.collection.TraversableView view(int, int);
  public scala.collection.IterableView view(int, int);
  public scala.collection.TraversableView view();
  public scala.collection.IterableView view();
  public scala.collection.Traversable toCollection(java.lang.Object);
  public scala.collection.Iterable toCollection(java.lang.Object);
  public scala.collection.Seq toCollection(java.lang.Object);
  public scala.collection.Traversable thisCollection();
  public scala.collection.Iterable thisCollection();
  public scala.collection.Seq thisCollection();
  public scala.collection.TraversableOnce seq();
  public scala.collection.Traversable seq();
  public scala.collection.Iterable seq();
  public scala.collection.Seq seq();
  public scala.collection.immutable.Traversable seq();
  public scala.collection.immutable.Iterable seq();
  public scala.collection.immutable.Seq seq();
  public scala.collection.IndexedSeq seq();
  public scala.collection.GenSeq toSeq();
  public scala.collection.Seq toSeq();
  public scala.collection.immutable.Seq toSeq();
  public scala.collection.GenIterable toIterable();
  public scala.collection.Iterable toIterable();
  public final java.lang.Object sum(scala.math.Numeric);
  public final java.lang.Object reverse();
  public final java.lang.Object dropRight(int);
  public final java.lang.Object takeRight(int);
  public final java.lang.Object dropWhile(scala.Function1);
  public final java.lang.Object takeWhile(scala.Function1);
  public final java.lang.Object tail();
  public final java.lang.Object init();
  public final java.lang.Object drop(int);
  public final java.lang.Object take(int);
  public final java.lang.Object apply(java.lang.Object);
  public final java.lang.Object apply(int);
  public java.lang.Object max(scala.math.Ordering);
  public java.lang.Object min(scala.math.Ordering);
  public java.lang.Object last();
  public scala.collection.Parallel par();
  public scala.collection.immutable.Range(int, int, int);
}